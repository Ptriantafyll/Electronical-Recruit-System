/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Erecruit_Login;

import javax.swing.*;
import java.sql.*;
import java.awt.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author panag
 */
public class RecruiterGui extends javax.swing.JFrame {

    String username;
    Connection conn=null;
    Statement stmt=null;
    PreparedStatement pst=null;
    ResultSet rs=null;
    public RecruiterGui(String username) {
        this.username = username;
        try
        {
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/erecruit" , "root" , "123qweasdzxc,");     
        }
        catch(Exception Ex)
        {
            JOptionPane.showMessageDialog(null,Ex);
        }
        initComponents();
        welcomeLabel.setText("Welcome " +this.username +" what would you like to do ?");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        welcomeLabel = new javax.swing.JLabel();
        ViewCompanyButton = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        CompanyTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        UserTable = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        FirmEdittor = new javax.swing.JButton();
        UserEditor = new javax.swing.JButton();
        jobsViewer = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        JobsTable = new javax.swing.JTable();
        evaluatetxt = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        firmJobsTable = new javax.swing.JTable();
        viewJobs = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        recruiterTable = new javax.swing.JTable();
        updateRecruiterButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(400, 400));
        setPreferredSize(new java.awt.Dimension(1320, 800));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        welcomeLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        welcomeLabel.setForeground(new java.awt.Color(31, 120, 255));
        welcomeLabel.setText("Hello");
        welcomeLabel.setToolTipText("");
        getContentPane().add(welcomeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 10, -1, 40));

        ViewCompanyButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        ViewCompanyButton.setForeground(new java.awt.Color(31, 120, 255));
        ViewCompanyButton.setText("View Company");
        ViewCompanyButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        ViewCompanyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewCompanyButtonActionPerformed(evt);
            }
        });
        getContentPane().add(ViewCompanyButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 60, -1, 43));

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton2.setForeground(new java.awt.Color(31, 120, 255));
        jButton2.setText("View your data");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 190, 200, 40));

        CompanyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "AFM", "DOY", "name", "tel", "street", "num", "city", "country"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        CompanyTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(CompanyTable);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 1030, 50));

        UserTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "username", "password", "name", "surname", "reg_date", "email", "lastLogIn"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        UserTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(UserTable);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 240, 1030, 50));

        jButton4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton4.setForeground(new java.awt.Color(34, 200, 75));
        jButton4.setText("Add Job");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 390, 170, 40));

        FirmEdittor.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        FirmEdittor.setForeground(new java.awt.Color(230, 145, 0));
        FirmEdittor.setText("Update Firm");
        FirmEdittor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FirmEdittorActionPerformed(evt);
            }
        });
        getContentPane().add(FirmEdittor, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 120, -1, 40));

        UserEditor.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        UserEditor.setForeground(new java.awt.Color(230, 145, 0));
        UserEditor.setText("Update User");
        UserEditor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UserEditorActionPerformed(evt);
            }
        });
        getContentPane().add(UserEditor, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 240, 150, 40));

        jobsViewer.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jobsViewer.setForeground(new java.awt.Color(35, 120, 255));
        jobsViewer.setText("View jobs you have announced");
        jobsViewer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jobsViewerActionPerformed(evt);
            }
        });
        getContentPane().add(jobsViewer, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 450, 330, 40));

        JobsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "id", "start_date", "salary", "position", "edra", "recruiter", "announce_date", "submission_date", "state", "applications", "evaluated"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, false, true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(JobsTable);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 500, 1030, 120));

        evaluatetxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                evaluatetxtActionPerformed(evt);
            }
        });
        getContentPane().add(evaluatetxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 460, 30, -1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Enter job id to evaluate");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 460, -1, -1));

        firmJobsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "id", "start_date", "salary", "position", "edra", "recruiter", "announce_date", "submission_date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        firmJobsTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(firmJobsTable);

        getContentPane().add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 690, 1030, 120));

        viewJobs.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        viewJobs.setForeground(new java.awt.Color(31, 120, 255));
        viewJobs.setText("View jobs announced from your firm");
        viewJobs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewJobsActionPerformed(evt);
            }
        });
        getContentPane().add(viewJobs, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 640, -1, 40));

        recruiterTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "username", "exp_years", "firm"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(recruiterTable);

        getContentPane().add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 310, 1030, 50));

        updateRecruiterButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        updateRecruiterButton.setForeground(new java.awt.Color(230, 145, 0));
        updateRecruiterButton.setText("Update Recruiter");
        updateRecruiterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateRecruiterButtonActionPerformed(evt);
            }
        });
        getContentPane().add(updateRecruiterButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 310, 190, 40));

        exitButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        exitButton.setForeground(new java.awt.Color(255, 0, 0));
        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });
        getContentPane().add(exitButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1180, 40, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ViewCompanyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewCompanyButtonActionPerformed
        try
        {        
            if(CompanyTable.getRowCount()>0)
            ((DefaultTableModel)CompanyTable.getModel()).removeRow(0);
            
        
            String companyQuery = 
            "select AFM,DOY,name,tel,Street,num,city,country from etaireia "
            + "inner join recruiter on etaireia.AFM = recruiter.firm "
            + "where recruiter.username LIKE '%" +this.username +"%';" ;
                       
            DefaultTableModel tempTable = (DefaultTableModel) CompanyTable.getModel();
                 
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(companyQuery);
            while(rs.next())
            {
                tempTable.addRow(new Object[] {rs.getString("AFM"), rs.getString("DOY"), rs.getString("name"), 
                rs.getDouble("tel"), rs.getString("Street"), rs.getInt("num"), rs.getString("city"), rs.getString("country")});              
            }  
            CompanyTable.setModel(tempTable);
        }   
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,e);
        }
    }//GEN-LAST:event_ViewCompanyButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try
        {
            if(UserTable.getRowCount()>0)
            ((DefaultTableModel)UserTable.getModel()).removeRow(0);
            
            String userQuery = 
            "select * from user"
            + " where username LIKE '%" +this.username +"%';" ;
            
            DefaultTableModel temporaryTable = (DefaultTableModel) UserTable.getModel();
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(userQuery);
            while(rs.next())
            {
                temporaryTable.addRow(new Object[] { rs.getString("username"), rs.getString("password") , rs.getString("name"),
                    rs.getString("surname") , rs.getString("reg_date"), rs.getString("email"), rs.getString("LastLogin")});
            }     
            UserTable.setModel(temporaryTable);
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,e);           
        }
        
        //Για να εμφανίσει τον πίνακα με τα στοιχεία του πίνακα recruiter
        try
        {
            if(recruiterTable.getRowCount()>0)
            ((DefaultTableModel)recruiterTable.getModel()).removeRow(0);
            
            String recruiterQuery = 
            "select * from recruiter"
            + " where username LIKE '%" +this.username +"%';" ;
            
            DefaultTableModel temporaryTable = (DefaultTableModel) recruiterTable.getModel();
            Statement stmt1 = conn.createStatement();
            ResultSet rs1 = stmt1.executeQuery(recruiterQuery);
            while(rs1.next())
            {
                temporaryTable.addRow(new Object[] { rs1.getString("username"), rs1.getString("exp_years"), rs1.getString("firm") });
            }     
            recruiterTable.setModel(temporaryTable);
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,e);           
        }
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void FirmEdittorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FirmEdittorActionPerformed
        try
        {
            String updated;
            String CompanyUpdateQuery = "update etaireia inner join recruiter on etaireia.AFM = recruiter.firm";
            double tel;        
            int num; 
            for(int i=0;i<CompanyTable.getColumnCount();i++)
            {
                updated = CompanyTable.getValueAt(0, i).toString();
                if(i==3)
                {
                    tel = Double.parseDouble(updated);
                    CompanyUpdateQuery += " , "  + CompanyTable.getColumnName(i) + " = " +tel ;
                }
                else if(i==5)
                {
                    num = Integer.parseInt(updated);
                    CompanyUpdateQuery += " , "  + CompanyTable.getColumnName(i) + " = " +num ;
                }
                else if(i==0)       
                    CompanyUpdateQuery += " set " +CompanyTable.getColumnName(i) + " = '" +updated +"'";
                else
                    CompanyUpdateQuery += " , " +CompanyTable.getColumnName(i) + " = '" +updated +"'";
                   
            }
            CompanyUpdateQuery += " where recruiter.username LIKE '%" +this.username +"%';" ; 

            JOptionPane.showMessageDialog(null, CompanyUpdateQuery);
            
            Statement stmt = conn.createStatement();
            pst =conn.prepareStatement(CompanyUpdateQuery);
            pst.executeUpdate();
            
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_FirmEdittorActionPerformed

    private void UserEditorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UserEditorActionPerformed
        try
        {
            String updated;
            String UserUpdateQuery = "update user";

            for(int i=0;i<UserTable.getColumnCount();i++)
            {
                updated = UserTable.getValueAt(0, i).toString();
                if(i==0)
                    UserUpdateQuery += " set " +UserTable.getColumnName(i) +" = '" +updated +"'";
                else
                    UserUpdateQuery += " , " +UserTable.getColumnName(i) +" = '" +updated +"'";
            }  
            UserUpdateQuery += " where username LIKE '%" +this.username +"%'";
            
            JOptionPane.showMessageDialog(null, UserUpdateQuery);

            Statement stmt = conn.createStatement();
            pst =conn.prepareStatement(UserUpdateQuery);
            pst.executeUpdate();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_UserEditorActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        JobInsert ins = new JobInsert();
        ins.setVisible(true);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jobsViewerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jobsViewerActionPerformed
        try 
        {
            int height = JobsTable.getRowCount();
            for(int i=0;i<height;i++)
            {
                ((DefaultTableModel)JobsTable.getModel()).removeRow(0);
            }           
            
            DefaultTableModel tempJobTable =  (DefaultTableModel)JobsTable.getModel();                  
            String jobs ="select *,DATEDIFF(submission_date,NOW())  from job"
                    + " where recruiter LIKE '%" +this.username +"%'";
            Statement stmt = conn.createStatement();           
            ResultSet rs = stmt.executeQuery(jobs);
            String applications ="select count(*) as applications from applies "
                            + "inner join job on job_id = id  "
                            + "where recruiter LIKE '%" +this.username + "%' group by job_id ";
            while(rs.next()) 
            {
                try
                {                 
                    if(rs.getInt("DATEDIFF(submission_date,NOW())")>0)
                    {
                        tempJobTable.addRow(new Object[] {rs.getString("id"), rs.getString("start_date") , rs.getString("salary") , rs.getString("position"),
                        rs.getString("edra") , rs.getString("recruiter") , rs.getString("announce_date") , rs.getString("submission_date") , "open" });   
                    }
                    else
                    {
                        tempJobTable.addRow(new Object[] {rs.getString("id"), rs.getString("start_date") , rs.getString("salary") , rs.getString("position"),
                        rs.getString("edra") , rs.getString("recruiter") , rs.getString("announce_date") , rs.getString("submission_date") , "closed" });  
                    }
                    
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(null, e);
                }
            }
            
            Statement smt = conn.createStatement();
            ResultSet res = smt.executeQuery(applications);
            
            for(int i=0;i<JobsTable.getRowCount();i++) //nom_of_applications for each job
            {
                
                if(res.next())
                    tempJobTable.setValueAt(res.getInt("applications"), i, 9);
                else
                    tempJobTable.setValueAt(0, i, 9); //αυτή η δουλειά δεν έχει αιτήσεις
            }
            
            smt = conn.createStatement();
            res = smt.executeQuery(jobs);
            for(int i=0;i<JobsTable.getRowCount();i++)
            {
                res.next();
                tempJobTable.setValueAt(res.getString("evaluated"), i, 10);
            }

        } 
        catch (Exception ex){}
        
        
    }//GEN-LAST:event_jobsViewerActionPerformed

    private void evaluatetxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_evaluatetxtActionPerformed
        try 
        {
            String evaluate, input;
            int job;
            input = evaluatetxt.getText();
            job = Integer.parseInt(input);
            evaluate = "call evaluate(" +job + ")" ;
            
            Statement smt = conn.createStatement();
            ResultSet res1 = smt.executeQuery(evaluate);
            
            res1.next();
            
            JOptionPane.showMessageDialog(null, "Best applicant : " +res1.getString("applicant")); //εμφανίζει τον καλύτερο
        }
        catch (Exception ex) 
        {
            JOptionPane.showMessageDialog(null, ex);
        }
        
    }//GEN-LAST:event_evaluatetxtActionPerformed

    private void viewJobsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewJobsActionPerformed
        try
        {
            int height = firmJobsTable.getRowCount();
            for(int i=0;i<height;i++)
            {
                ((DefaultTableModel)firmJobsTable.getModel()).removeRow(0);
            }
            String firmj;
            DefaultTableModel tempJobTable =  (DefaultTableModel)firmJobsTable.getModel();
            
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery("select firm from recruiter where username LIKE '%" +this.username +"%'");
            rs.next();
                        
            firmj ="select id,start_date,salary,position,edra,recruiter,announce_date,submission_date from job "
                    + "inner join recruiter on job.recruiter = recruiter.username "
                    + "inner join etaireia on recruiter.firm = etaireia.afm "
                    + "where etaireia.AFM LIKE '%" +rs.getString("firm") +"%'";
            
            JOptionPane.showMessageDialog(null, firmj);
            
            Statement smt = conn.createStatement();
            ResultSet res = smt.executeQuery(firmj);
            
            while(res.next())
            {
                tempJobTable.addRow(new Object[] {res.getString("id"), res.getString("start_date") , res.getString("salary") , res.getString("position"),
                        res.getString("edra") , res.getString("recruiter") , res.getString("announce_date") , res.getString("submission_date")
                });
            } 
            
            
        }
        catch (Exception ex) 
        {
            JOptionPane.showMessageDialog(null, ex);
        }
        
        
        
    }//GEN-LAST:event_viewJobsActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void updateRecruiterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateRecruiterButtonActionPerformed
        try
        {
            String updated;
            String recruiterUpdateQuery = "update recruiter";

            for(int i=0;i<recruiterTable.getColumnCount();i++)
            {
                updated = recruiterTable.getValueAt(0, i).toString();
                if(i==0)
                    recruiterUpdateQuery += " set " +recruiterTable.getColumnName(i) +" = '" +updated +"'";
                else
                    recruiterUpdateQuery += " , " +recruiterTable.getColumnName(i) +" = '" +updated +"'";
            }  
            recruiterUpdateQuery += " where username LIKE '%" +this.username +"%'";
            
            JOptionPane.showMessageDialog(null, recruiterUpdateQuery);

            pst =conn.prepareStatement(recruiterUpdateQuery);
            pst.executeUpdate();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_updateRecruiterButtonActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable CompanyTable;
    private javax.swing.JButton FirmEdittor;
    private javax.swing.JTable JobsTable;
    private javax.swing.JButton UserEditor;
    private javax.swing.JTable UserTable;
    private javax.swing.JButton ViewCompanyButton;
    private javax.swing.JTextField evaluatetxt;
    private javax.swing.JButton exitButton;
    private javax.swing.JTable firmJobsTable;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JButton jobsViewer;
    private javax.swing.JTable recruiterTable;
    private javax.swing.JButton updateRecruiterButton;
    private javax.swing.JButton viewJobs;
    private javax.swing.JLabel welcomeLabel;
    // End of variables declaration//GEN-END:variables
}

